/*****************************************************************//**
 * \file   messaging.h
 * \brief  
 * 
 * \author kason
 * \date   October 2021
 *********************************************************************/

#ifndef NETWORK_MESSAGES
#define NETWORK_MESSAGES

#include <cstring>
#include <vector>

#include "types/messages.h"
#include "types/network_message_types.h"
#include "types/network_message_header.h"
#include "types/network_message_footer.h"


/**
 * Base class for other messages.
 */
class MESSAGE 
{
public:
	/** Default constructor. Set type to UNDEFINED */
	MESSAGE();

	/**
	 * Create a message.
	 * 
	 * \param message_type Type of message created.
	 * \param types the types of data contained in the message.
	 */
	MESSAGE(MESSAGES message_type, std::vector<Network_Messaging_Type*> types);
	/**
	 * Boil the MESSAGE down to an array of bytes that can be padded with a header and footer and shipped on the network.
	 * 
	 * \return Byte array of the message.
	 */
	std::vector<Byte> pack();
	/**
	 * Size of the array of bytes produced by MESSAGE::pack()
	 * 
	 * \return Size of array.
	 */
	size_t size();

	/**
	 * Convert array of bytes into the given message.
	 * 
	 * \param message Array of bytes to convert.
	 * \param header_size Size of the message header so that the header can be removed.
	 */
	void unpack(std::vector<Byte> message, int header_size);

	/**
	 * \return type of the message.
	 */
	MESSAGES get_type();
	/**
	 * \return array of message data.
	 */
	std::vector<Network_Messaging_Type*> get_message();

	/**
	 * Get a specific data in the array of message data.
	 * \param index Index of data to get
	 * \return Data.
	 */
	Network_Messaging_Type& operator[](int index);
private:
	std::vector<Network_Messaging_Type*> message;
	MESSAGES type;
};

/**
 * A packed message waiting for sending
 * |         |       |         |
 * |:-------:|:-----:|:-------:|
 * |  01-24  | 25-n  | n+1-n+16|
 * |  Header |Message|  Footer |
 */
struct PACKED_MESSAGE
{

	PACKED_MESSAGE() {  };

	/**
	 * Constructor that sets a message up by accepting a MESSAGE type.
	 * \param message Message to be the main body of the message sent on the network.
	 */
	PACKED_MESSAGE(MESSAGE message);

	/**
	 * Constructor that sets the message data by a packet.
	 * \param pack A packet to be unpacked into the message type.
	 */
	PACKED_MESSAGE(Byte_Array pack);


	/**
	 * Return a fully generated byte packet. This is ready to be sent over the network connections.
	 * \return byte packet.
	 */
	std::vector<Byte> get_packet();

	/**
	 * Get individual components of a packed message.
	 * \param head Reference to a message header. This param will contain the messages header.
	 * \param mess Reference to a message body. This param will contain the messages data.
	 * \param foot Reference to a message footer. This param will contain the messages footer.
	 */
	void get_message(MESSAGE_HEADER& head, MESSAGE& mess, MESSAGE_FOOTER& foot);
private:
	/** Header */
	MESSAGE_HEADER header;
	/** Message to pack */
	MESSAGE message;
	/** Message as a packed string */
	std::vector<Byte> packet;
	/** Footer, mainly checksums */
	MESSAGE_FOOTER footer;

	/**
	* Get MESSAGES based on byte 2 of the header.
	* @return The message type of the main body.
	*/
	MESSAGES get_message_enum_by_type();
};

#endif // !NETWORK_MESSAGES